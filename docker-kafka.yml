version: '3'
services:
  zookepper:
    image: wurstmeister/zookeeper                                 # 原镜像`wurstmeister/zookeeper`
    hostname: "zookeeper.local"
    container_name: zookeeper                        # 容器名为'zookeeper'
    restart: unless-stopped                                  # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    ports:                                           # 映射端口
      - "2181:2181"
    networks:                                        # 设置网络别名
      local:
        aliases:
          - "zookeeper.local"

  kafka:
    image: wurstmeister/kafka                                # 原镜像`wurstmeister/kafka`
    hostname: "kafka.local"
    container_name: kafka                                    # 容器名为'kafka'
    restart: unless-stopped                                          # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    environment:                                                       # 设置环境变量,相当于docker run命令中的-e
      KAFKA_ADVERTISED_HOST_NAME: 10.255.3.97                          # TODO 本机IP
      KAFKA_ADVERTISED_PORT: 9092                                      # 端口
      KAFKA_BROKER_ID: 0                                               # 在kafka集群中，每个kafka都有一个BROKER_ID来区分自己
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.255.3.97:9092         # TODO 将kafka的地址端口注册给zookeeper
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092                        # 配置kafka的监听端口
      KAFKA_ZOOKEEPER_CONNECT: 10.255.3.97:2181                        # TODO zookeeper地址
    ports:                              # 映射端口
      - "9092:9092"
    networks:                           # 设置网络别名
      local:
        aliases:
          - "kafka.local"
    depends_on:                         # 解决容器依赖启动先后问题
      - zookepper

  # 设置网络，名为local
networks:
  local:
    driver: bridge